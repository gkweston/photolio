{"ast":null,"code":"var _jsxFileName = \"/Users/gkweston/Git/photolio/src/contexts/theme.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\nconst ThemeProvider = ({\n  children\n}) => {\n  _s();\n\n  const [themeName, setThemeName] = useState('light');\n  useEffect(() => {\n    const isDark = localStorage.getItem('themeName') === 'dark';\n    if (isDark) setThemeName('dark');\n  }, []);\n\n  const toggleTheme = () => {\n    const name = themeName === 'dark' ? 'light' : 'dark';\n    localStorage.setItem('themeName', name);\n    setThemeName(name);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: [{\n      themeName,\n      toggleTheme\n    }],\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ThemeProvider, \"SuRQqTvpA2I4PIgWuFEVm/A8+ME=\");\n\n_c = ThemeProvider;\nThemeProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport { ThemeProvider, ThemeContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["/Users/gkweston/Git/photolio/src/contexts/theme.js"],"names":["createContext","useEffect","useState","PropTypes","ThemeContext","ThemeProvider","children","themeName","setThemeName","isDark","localStorage","getItem","toggleTheme","name","setItem","propTypes","node","isRequired"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,YAAY,gBAAGJ,aAAa,EAAlC;;AAEA,MAAMK,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,OAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMQ,MAAM,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,MAAsC,MAArD;AACA,QAAIF,MAAJ,EAAYD,YAAY,CAAC,MAAD,CAAZ;AACb,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMI,WAAW,GAAG,MAAM;AACxB,UAAMC,IAAI,GAAGN,SAAS,KAAK,MAAd,GAAuB,OAAvB,GAAiC,MAA9C;AACAG,IAAAA,YAAY,CAACI,OAAb,CAAqB,WAArB,EAAkCD,IAAlC;AACAL,IAAAA,YAAY,CAACK,IAAD,CAAZ;AACD,GAJD;;AAMA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE,CAAC;AAAEN,MAAAA,SAAF;AAAaK,MAAAA;AAAb,KAAD,CAA9B;AAAA,cACGN;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAnBD;;GAAMD,a;;KAAAA,a;AAqBNA,aAAa,CAACU,SAAd,GAA0B;AACxBT,EAAAA,QAAQ,EAAEH,SAAS,CAACa,IAAV,CAAeC;AADD,CAA1B;AAIA,SAASZ,aAAT,EAAwBD,YAAxB","sourcesContent":["import { createContext, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ThemeContext = createContext()\n\nconst ThemeProvider = ({ children }) => {\n  const [themeName, setThemeName] = useState('light')\n\n  useEffect(() => {\n    const isDark = localStorage.getItem('themeName') === 'dark'\n    if (isDark) setThemeName('dark')\n  }, [])\n\n  const toggleTheme = () => {\n    const name = themeName === 'dark' ? 'light' : 'dark'\n    localStorage.setItem('themeName', name)\n    setThemeName(name)\n  }\n\n  return (\n    <ThemeContext.Provider value={[{ themeName, toggleTheme }]}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nThemeProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport { ThemeProvider, ThemeContext }\n"]},"metadata":{},"sourceType":"module"}